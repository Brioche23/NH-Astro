  ---
  const {vimeoId, title} = Astro.props;
  ---

  <astro-vimeo data-message={vimeoId} >
      
      <div id={vimeoId} class="video-wrapper relative ">
        <!-- <button class="play-button absolute top-5 right-5 z-10">PLAY</button>
        <button class="mute-button absolute top-10 right-5 z-10">MUTE</button> -->
        
        <p class="vimeo-title transition-opacity duration-500 ease-in-out absolute top-5 left-5 z-10">{title}</p>

      </div>
  </astro-vimeo>


  <script is:inline src="https://player.vimeo.com/api/player.js"></script>
  <script>

      // Define the behaviour for our new type of HTML element.
    class AstroVimeo extends HTMLElement {
      constructor() {
        super();

        const message = this.dataset.message;

        const options = {
          id: message,
          loop: true,
          portrait:0,
          muted:0,
          autoplay:0,
          autopause:0,
          title:0,
          controls:0,
          responsive: 1,
          width: 480
      };

      const player = new Vimeo.Player(message, options);
      let isPlaying = false;


     const playButton = this.querySelector('button.play-button');
     const muteButton = this.querySelector('button.mute-button');
     
     const vimeoContent = this.querySelector('div.video-wrapper');
     vimeoContent.addEventListener("click", () => {
      isPlaying ? player.pause() :  player.play();
      isPlaying = !isPlaying;
    });

//       playButton.addEventListener("click", () => {
//         isPlaying ? player.pause() :  player.play();
//         playButton.innerHTML = isPlaying ? "PLAY" : "PAUSE";
//         isPlaying = !isPlaying;     
// });

//       muteButton.addEventListener("click", () => {
//         if(muteButton.innerHTML == "MUTE" ){

//           player.setVolume(0);
//           muteButton.innerHTML = "UNMUTE"; 
//         }
//         else{
//           player.setVolume(1);
//           muteButton.innerHTML = "MUTE"; 

//         }
// });

      player.on('play', function() {
          console.log('played the video!');
      });
    }
  }
    // Tell the browser to use our AstroVimeo class for <astro-vimeo> elements.
    customElements.define('astro-vimeo', AstroVimeo);
  </script>

  <style>

    
      .video-wrapper iframe {
        width: 100vw;
   height: 56.25vw; /* Given a 16:9 aspect ratio, 9/16*100 = 56.25 */
   min-height: 100vh;
   min-width: 177.77vh; /* Given a 16:9 aspect ratio, 16/9*100 = 177.77 */
   position: absolute;
   top: 50%;
   left: 50%;
   transform: translate(-50%, -50%);
      }

      .video-wrapper::after {
  content:"";
  position:absolute;
  z-index:3;
  width:100%;
  height:100%;
  left:0;
  top:0;
}
  </style>